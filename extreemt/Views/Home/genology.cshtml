@using org.jivesoftware.util;

@{
    if (!extreemt.tools.isAuthorized(Request.Url.AbsolutePath))
    {
        if (Request.Url.AbsolutePath != Url.Action("Index", "Home"))
        {
            Response.Redirect(Url.Action("Index", "Home"));
            return;
        }
    }
}
@{
    ViewBag.Title = "genology";
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
}


@helper renderEmptyNode(extreemt.user currentUser, string cssClass, string myPos)
{
    string url = "#";

    extreemt.crypt algo = new extreemt.crypt();
    string content = "";

    if (currentUser != null)
    {
        //parent gen number , my position , parent user id
        content = currentUser.genNumber + "$$$" + myPos + "$$$" + currentUser.userId;
        content = algo.Encrypt(content);
        content = HttpUtility.UrlEncode(content.Replace("+", "25252"));
        url = Url.Action("SignUp", "Account") + "?a=" + content;
    }
    else
    {
        url = "#";
    }

    <div class="@cssClass">
        <div style="min-height:200px;background-color:gray;text-align:center;border-style:solid;border-radius:7px;">

            <div class="">
                <img src="~/Content/images/images.jpg" width="60" height="60" style="border: 2px solid gray;">
            </div>


            <div class="">
                <span>Empty</span>
            </div>

            @{
                if (currentUser != null)
                {
                    <div class=""><span><a href="@url">Add One</a></span></div>
                }
                else
                {
                    <div class=""><a href="#">Add One</a></div>
                }
            }

            <div class="greenrow">
                L: 0  R: 0
            </div>
            <div class="redrow">
                L: 0 R: 0
            </div>
            <div class="orangerow">
                L: 0 R: 0
            </div>
        </div>
    </div>
}

@helper renderNode(extreemt.user user, string cssClass, string style = "")
{
    <div class="@cssClass" style="@style">
        @{
            string backGround = "";
            if (user.isActive)
            {
                backGround = "white";
            }
            else
            {
                backGround = "burlywood";
            }
        }
        <div style="min-height:200px;background-color:@backGround;text-align:center;border-style:solid;border-radius:7px">

            <div class="">
                <img src="~/Content/images/images.jpg" width="60" height="60" style="border: 2px solid gray;">
            </div>

            @{

                extreemt.crypt algo = new extreemt.crypt();
                string userId = algo.Encrypt(user.userId + "$$$" + user.genNumber);

                userId = HttpUtility.UrlEncode(userId.Replace("+", "25252"));
                string url = Url.Action("genology", "Home") + "?a=" + userId;
            }
            <div class=""><a href="@url">@user.userId</a> </div>

            <div class="">
                <span>@user.username</span>
            </div>

            <div class="greenrow">
                L: @user.leftActiveCount  R: @user.rightActiveCount
            </div>
            <div class="redrow">
                L: @user.leftInactiveCount R: @user.rightInactiveCount
            </div>
            <div class="orangerow">
                L: @user.dailyLeftActiveCount R: @user.dailyRightActiveCount
            </div>

        </div>
    </div>
}







@section head{
    <style>
        .greenrow {
            font-family: Arial;
            background-color: MediumSeaGreen;
            text-align: center;
        }

        .redrow {
            width: 100%;
            font-family: Arial;
            background-color: #FF6666;
            text-align: center;
        }

        .orangerow {
            width: 100%;
            font-family: Arial;
            background-color: #ff6a00;
            text-align: center;
        }

        .nodepixels {
            display: inline-block;
        }

        .wrapper {
            clear: both;
            width: 100%;
            min-width: 900px;
        }

        .myrow {
            clear: both;
            width: 100%;
            min-width: 1300px;
        }

        .nodepixels {
            width: 140px;
        }

        .offset5 {
            margin-left: 490px;
        }

        .offset3 {
            margin-left: 285px;
        }

        .offset4 {
            margin-left: 380px;
        }

        .offset2rob3 {
            margin-left: 200px;
        }

        .offset2 {
            margin-left: 180px;
        }

        .offset1nos {
            margin-left: 137px;
        }

        .offset1 {
            margin-left: 95px;
        }

        .offsetnos {
            margin-left: 60px;
        }

        .offsetrob3 {
            margin-left: 50px;
        }
    </style>
}
<h2>genology</h2>

@{
    string id, decryptedId;
    int currentUserId, GenNumber;
    extreemt.crypt algo;
    try
    {
        id = (string)ViewData["id"];

        algo = new extreemt.crypt();
        decryptedId = algo.Decrypt(id);
        string[] user = decryptedId.Split(new char[] { '$', '$', '$' });
        //string position = "parent";

        currentUserId = int.Parse(user[0]);
        int i = 1;
        while (user[i] == "")
        {
            i++;
        }
        GenNumber = int.Parse(user[i]);
    }
    catch (Exception c)
    {
        return;
    }


    if (currentUserId != null && currentUserId != 0)
    {

        extreemt.user leftUser = null;
        extreemt.user rightUser = null;
        extreemt.extreemtEntities db = new extreemt.extreemtEntities();

        extreemt.user currentUser = db.users.Where(u => u.userId == currentUserId && u.genNumber == GenNumber).First();
        extreemt.user loginUser = currentUser;
        if (currentUser.genNumber == 1)
        {
            if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
            {

                leftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
            }
            if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
            {

                rightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
            }
        }
        else if (currentUser.genNumber == 2)
        {
            if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
            {

                leftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
            }
            if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
            {

                rightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
            }
        }
        else
        {

            if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
            {

                leftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
            }
            if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
            {

                rightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
            }
        }

        <div class="wrapper">


            <div class="myrow">
                @{
        string style = "margin:0 auto;display:block!important";
                }
                @renderNode(currentUser, "nodepixels", style)

            </div>

            <div class="myrow">
                <div class="offset4" style="width:585px">

                    <img width="100%" height="100%" src="~/Content/images/level1.PNG">

                </div>
            </div>

            <!--level2-->

            <div class="myrow">
                @{


        if (leftUser != null)
        {
            @renderNode(leftUser, "offset3 nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offset3 nodepixels", "left");
        }
                }


                @{


        if (rightUser != null)
        {
            @renderNode(rightUser, "offset5 nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offset5 nodepixels", "right");
        }
                }
            </div>

            <div class="myrow">

                <div class="offset2" style="width:335px;float:left">

                    <img width="100%" height="100%" src="~/Content/images/level1.PNG">

                </div>


                <div class="offset3" style="width:340px;float:left">

                    <img width="100%" height="100%" src="~/Content/images/level1.PNG">

                </div>


            </div>


            <!--level 3-->
            <div class="myrow">
                @{
        extreemt.user leftLeftUser = null;
        extreemt.user leftRightUser = null;
        currentUser = leftUser;
        if (currentUser != null)
        {
            if (currentUser.genNumber == 1)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
                {

                    leftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
                {

                    leftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
                }
            }
            else if (currentUser.genNumber == 2)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
                {

                    leftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
                {

                    leftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
                }
            }
            else
            {

                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
                {

                    leftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
                {

                    leftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
                }
            }

        }






        if (leftLeftUser != null)
        {
            @renderNode(leftLeftUser, "offset1nos nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offset1nos nodepixels", "left");

        }

        if (leftRightUser != null)
        {
            @renderNode(leftRightUser, "offset1nos nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offset1nos nodepixels", "right");

        }

                }
                @{
        extreemt.user rightLeftUser = null;
        extreemt.user rightRightUser = null;
        currentUser = rightUser;
        if (currentUser != null)
        {
            if (currentUser.genNumber == 1)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
                {

                    rightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
                {

                    rightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
                }
            }
            else if (currentUser.genNumber == 2)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
                {

                    rightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
                {

                    rightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
                }
            }
            else
            {

                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
                {

                    rightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
                {

                    rightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
                }
            }



        }

        if (rightLeftUser != null)
        {
            @renderNode(rightLeftUser, "offset2rob3 nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offset2rob3 nodepixels", "left");

        }

        if (rightRightUser != null)
        {
            @renderNode(rightRightUser, "offset1nos nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offset1nos nodepixels", "right");

        }

                }

            </div>

            <div class="myrow">

                <div class="" style="float:left;margin-left:100px;width:200px;">

                    <img width="100%" height="100%" src="~/Content/images/level1.PNG">

                </div>


                <div class="" style="float:left;width:200px;margin-left: 89px;">

                    <img width=" 100%" height="100%" src="~/Content/images/level1.PNG">

                </div>
                <div class="" style="float:left;width:200px;margin-left: 138px;">

                    <img width=" 100%" height="100%" src="~/Content/images/level1.PNG">

                </div>


                <div class="" style="float:left;width:200px;margin-left: 89px;">

                    <img width=" 100%" height="100%" src="~/Content/images/level1.PNG">

                </div>

            </div>


            <!--level 4-->
            <div class="myrow">

                @{
        extreemt.user leftLeftLeftUser = null;
        extreemt.user leftLeftRightUser = null;
        currentUser = leftLeftUser;
        if (currentUser != null)
        {
            if (currentUser.genNumber == 1)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
                {

                    leftLeftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
                {

                    leftLeftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
                }
            }
            else if (currentUser.genNumber == 2)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
                {

                    leftLeftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
                {

                    leftLeftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
                }
            }
            else
            {

                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
                {

                    leftLeftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
                {

                    leftLeftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
                }
            }



        }

        if (leftLeftLeftUser != null)
        {
            @renderNode(leftLeftLeftUser, "offsetnos nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offsetnos nodepixels", "left");

        }

        if (leftLeftRightUser != null)
        {
            @renderNode(leftLeftRightUser, "nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "nodepixels", "right");

        }

                }

                @{
        extreemt.user leftRightLeftUser = null;
        extreemt.user leftRightRightUser = null;
        currentUser = leftRightUser;
        if (currentUser != null)
        {
            if (currentUser.genNumber == 1)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
                {

                    leftRightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
                {

                    leftRightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
                }
            }
            else if (currentUser.genNumber == 2)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
                {

                    leftRightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
                {

                    leftRightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
                }
            }
            else
            {

                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
                {

                    leftRightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
                {

                    leftRightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
                }
            }



        }

        if (leftRightLeftUser != null)
        {
            @renderNode(leftRightLeftUser, "nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "nodepixels", "left");

        }


        if (leftRightRightUser != null)
        {
            @renderNode(leftRightRightUser, "nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "nodepixels", "right");

        }


                }

                @{
        extreemt.user rightLeftLeftUser = null;
        extreemt.user rightLeftRightUser = null;
        currentUser = rightLeftUser;
        if (currentUser != null)
        {
            if (currentUser.genNumber == 1)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
                {

                    rightLeftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
                {

                    rightLeftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
                }
            }
            else if (currentUser.genNumber == 2)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
                {

                    rightLeftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
                {

                    rightLeftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
                }
            }
            else
            {

                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
                {

                    rightLeftLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
                {

                    rightLeftRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
                }
            }



        }

        if (rightLeftLeftUser != null)
        {
            @renderNode(rightLeftLeftUser, "offsetrob3 nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "offsetrob3 nodepixels", "left");

        }

        if (rightLeftRightUser != null)
        {
            @renderNode(rightLeftRightUser, "nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "nodepixels", "right");

        }
                }
                @{
        extreemt.user rightRightLeftUser = null;
        extreemt.user rightRightRightUser = null;
        currentUser = rightRightUser;
        if (currentUser != null)
        {
            if (currentUser.genNumber == 1)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).Count() > 0)
                {

                    rightRightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).Count() > 0)
                {

                    rightRightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 3).First();
                }
            }
            else if (currentUser.genNumber == 2)
            {
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).Count() > 0)
                {

                    rightRightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 2).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).Count() > 0)
                {

                    rightRightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 2).First();
                }
            }
            else
            {

                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).Count() > 0)
                {

                    rightRightLeftUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "left" && u.parentGenNum == 3).First();
                }
                if (db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).Count() > 0)
                {

                    rightRightRightUser = db.users.Where(u => u.parentUserId == currentUser.userId && u.genNumber == 1 && u.position == "right" && u.parentGenNum == 3).First();
                }
            }



        }

        if (rightRightLeftUser != null)
        {
            @renderNode(rightRightLeftUser, "nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "nodepixels", "left");

        }
        if (rightRightRightUser != null)
        {
            @renderNode(rightRightRightUser, "nodepixels");
        }
        else
        {
            @renderEmptyNode(currentUser, "nodepixels", "right");

        }
                }
            </div>
            <br />
        </div>

    }
}
